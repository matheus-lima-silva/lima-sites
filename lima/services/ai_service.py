"""
M√≥dulo para integra√ß√£o com servi√ßos de IA (OpenAI/Gemini).
Este m√≥dulo est√° temporariamente desativado e retorna respostas padr√£o.
"""

import logging
from typing import Any, Dict

# Removida a importa√ß√£o que estava causando o erro
# import google.generativeai as genai
from ..settings import Settings

settings = Settings()
logger = logging.getLogger(__name__)

# Configura√ß√µes padr√£o para os modelos de IA
DEFAULT_MODEL = 'gpt-3.5-turbo'
DEFAULT_TEMPERATURE = 0.7
DEFAULT_MAX_TOKENS = 300
DEFAULT_TIMEOUT = 30.0  # segundos


class AIServiceError(Exception):
    """Exce√ß√£o para erros relacionados ao servi√ßo de IA"""
    pass


async def format_endereco_resposta(endereco: Dict[str, Any]) -> str:
    """
    Vers√£o simplificada que retorna uma mensagem formatada padr√£o.

    Args:
        endereco: Dicion√°rio com dados do endere√ßo

    Returns:
        str: Texto formatado de forma padr√£o
    """
    # Resposta formatada manualmente sem usar IA
    return (
        f'üè† *Endere√ßo encontrado*\n\n'
        f'*Logradouro:* {endereco.get("logradouro", "N√£o informado")}, '
        f'{endereco.get("numero", "S/N")}\n'
        f'*Bairro:* {endereco.get("bairro", "N√£o informado")}\n'
        f'*Cidade:* {endereco.get("municipio", "N√£o informado")}\n'
        f'*UF:* {endereco.get("uf", "N√£o informado")}\n'
        f'*CEP:* {endereco.get("cep", "N√£o informado")}\n\n'
        f"Para sugerir altera√ß√µes neste endere√ßo, use o comando 'sugerir'."
    )


async def format_sugestao_resposta(sugestao: Dict[str, Any]) -> str:
    """
    Vers√£o simplificada que retorna uma mensagem formatada padr√£o.

    Args:
        sugestao: Dicion√°rio com dados da sugest√£o

    Returns:
        str: Texto formatado de forma padr√£o
    """
    # Resposta formatada manualmente sem usar IA
    return (
        f'‚úÖ *Sugest√£o registrada com sucesso!*\n\n'
        f'Sua sugest√£o ser√° analisada por nossa equipe '
        f'e voc√™ receber√° uma notifica√ß√£o '
        f'quando for processada.\n\n'
        f'*Conte√∫do da sugest√£o:*\n{
        sugestao.get(
        "detalhe", "N√£o informado")}\n\n'
f'Agradecemos sua contribui√ß√£o para mantermos nossa base de dados atualizada!'
    )


async def query_openai(
    prompt: str,
    model: str = DEFAULT_MODEL,
    temperature: float = DEFAULT_TEMPERATURE,
    max_tokens: int = DEFAULT_MAX_TOKENS,
) -> str:
    """
    Vers√£o simplificada que retorna uma mensagem padr√£o.

    Args:
        prompt: O texto do prompt a ser enviado
        model: O modelo da OpenAI a ser usado
        temperature: Controle de aleatoriedade (0.0-2.0)
        max_tokens: N√∫mero m√°ximo de tokens na resposta

    Returns:
        str: Texto padr√£o informando que o servi√ßo est√° desativado
    """
    logger.info(
    "Servi√ßo de IA est√° temporariamente desativado. Usando resposta padr√£o.")
    return ("O servi√ßo de processamento inteligente est√° temporariamente"
    " desativado. "
            "Por favor, tente novamente mais tarde.")


async def query_gemini(
    prompt: str,
    temperature: float = DEFAULT_TEMPERATURE,
    max_tokens: int = DEFAULT_MAX_TOKENS,
) -> str:
    """
    Vers√£o simplificada que retorna uma mensagem padr√£o.

    Args:
        prompt: O texto do prompt a ser enviado
        temperature: Controle de aleatoriedade (0.0-1.0)
        max_tokens: N√∫mero m√°ximo de tokens na resposta

    Returns:
        str: Texto padr√£o informando que o servi√ßo est√° desativado
    """
    logger.info(
    "Servi√ßo de IA est√° temporariamente desativado. Usando resposta padr√£o.")
    return "O servi√ßo de processamento inteligente est√° temporariamente"
    " desativado. Por favor, tente novamente mais tarde."


async def generate_ai_response(prompt: str) -> str:
    """
    Vers√£o simplificada que retorna uma mensagem padr√£o.

    Args:
        prompt: O texto do prompt enviado pelo usu√°rio

    Returns:
        str: Texto padr√£o informando que o servi√ßo est√° desativado
    """
    logger.info(
    "Servi√ßo de IA est√° temporariamente desativado. Usando resposta padr√£o.")
    return (
    "O servi√ßo de processamento inteligente est√° temporariamente desativado. "
            "Por favor, tente novamente mais tarde.")


async def process_address_request(query: str, user_id: int) -> str:
    """
    Vers√£o simplificada que retorna uma mensagem padr√£o.

    Args:
        query: A consulta do usu√°rio sobre endere√ßos
        user_id: ID do usu√°rio que fez a solicita√ß√£o

    Returns:
        str: Texto padr√£o informando que o servi√ßo est√° desativado
    """
    logger.info(
    f"Solicita√ß√£o de endere√ßo recebida do usu√°rio {
        user_id}: '{query}'. Usando resposta padr√£o.")
    return (
        "Desculpe, o processamento inteligente de solicita√ß√µes est√° "
        "temporariamente desativado. "
        "Por favor, tente usar os comandos espec√≠ficos do sistema para buscar "
        "endere√ßos."
    )
